{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","finalTweetsInit","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userlike","setUserlike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.f2eb6807.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useEffect,useState} from 'react'\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props){\r\n  const textAreaRef=React.createRef()\r\n  const [newTweets,setNewTweets]=useState([])\r\n  const handleSubmit=(event)=>{\r\n    event.preventDefault()\r\n    const newVal=textAreaRef.current.value\r\n    let tempNewTweets=[...newTweets]\r\n    tempNewTweets.unshift({\r\n      content:newVal,\r\n      likes:0,\r\n      id:12313\r\n    })\r\n    // console.log(tempNewTweets)   returns =>  0: {content: \"jshad lfhs\", likes: 0, id: 12313}\r\n    setNewTweets(tempNewTweets)\r\n    textAreaRef.current.value=''\r\n  }\r\n  return <div className={props.className}>\r\n          <div className='col-12'>\r\n            <form onSubmit={handleSubmit}>\r\n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n          </div>\r\n          <TweetsList newTweets={newTweets}/>\r\n        </div>\r\n}\r\n\r\nexport function TweetsList(props){\r\n  const [tweetsInit,setTweetsInit]=useState(props.newTweets ? props.newTweets : [])\r\n  const [tweets,setTweets]=useState([])\r\n  // console.log(props.newTweets)           Both returns same\r\n  // console.log([...props.newTweets])      Both returns same\r\n  // var a=0\r\n  // setTweetsInit([...props.newTweets].concat(tweetsInit)) Goes into infinite loop if used here\r\n  useEffect(()=>{\r\n    const final = [...props.newTweets].concat(tweetsInit)\r\n    if(final.length !== tweets.length){\r\n      setTweets(final)\r\n    }\r\n  },[props.newTweets,tweets,tweetsInit])\r\n  useEffect(()=>{\r\n  const mycallback=(response,status)=>{\r\n      // console.log(response,status)\r\n    if (status===200){\r\n      const finalTweetsInit=[...response].concat(tweetsInit)\r\n      // console.log(finalTweetsInit)\r\n      // console.log(response,[...response])\r\n      // a=a+1\r\n      // console.log(a)\r\n      setTweetsInit(finalTweetsInit)\r\n    }else{\r\n      alert(\"There was an error\")\r\n    }\r\n  }\r\n    loadTweets(mycallback)\r\n  },[tweetsInit])\r\n    return tweets.map((item,index)=>{\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n  })\r\n}\r\nexport function ActionBtn(props){\r\n    const {tweet,action}=props\r\n    const [likes,setLikes]=useState(tweet.likes? tweet.likes : 0)\r\n    const [userlike,setUserlike]=useState(tweet.userlike === true ? true:false)\r\n    const className=props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay=action.display ? action.display : 'Action'\r\n    const handleClick=(event)=>{\r\n        event.preventDefault()\r\n        if (action.type==='like'){\r\n            if(userlike===true){\r\n                setLikes(likes-1)\r\n                setUserlike(false)\r\n            }else{\r\n                setLikes(likes+1)\r\n                setUserlike(true)\r\n            }\r\n        }\r\n    }\r\n    const display=action.type==='like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button> \r\n  }\r\n  \r\nexport function Tweet(props){\r\n    const {tweet}=props\r\n    const className=props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n      <p>{tweet.id} - {tweet.content}</p>\r\n      <div className='btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={{type:'like',display:'Likes'}}/>\r\n          <ActionBtn tweet={tweet} action={{type:'unlike',display:'Unlikes'}}/>\r\n          <ActionBtn tweet={tweet} action={{type:'retweet',display:'retweet'}}/>\r\n      </div>\r\n      </div>\r\n  }","export function loadTweets(callback){\r\n    const xhr=new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType=responseType\r\n    xhr.open(method,url)\r\n    xhr.onload=function(){\r\n      callback(xhr.response,xhr.status)\r\n    }\r\n    xhr.onerror=function(e){\r\n      // console.log(e)\r\n      callback({\"message\":\"The request was an error\"},400)\r\n    }\r\n  xhr.send()\r\n  }\r\n","import React,{useEffect,useState} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets'\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(<App />,appEl);\n}\nconst tweetsEl=document.getElementById('tweetme-2')\nif(tweetsEl){\n  ReactDOM.render(<TweetsComponent />,tweetsEl);\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}